"use strict";angular.module("angularLeap",[]),angular.module("angularLeap").provider("leapConfig",function(){var a,b={defaultTimeout:650,gestureIntense:.5};a=function(a){return angular.extend(b,a)},this.config=function(b){return a(b)},this.$get=function(){return a}}),angular.module("angularLeap").provider("leap",["leapConfigProvider",function(a){var b,c;c=function(a){return b||(b=new a.Leap.Controller({enableGestures:!0}),b.connect()),b},this.config=a,this.$get=["$window","leapConfig","leapFn",function(a,b,d){if(!a.Leap)throw new Error("You should include LeapJS Native JavaScript API");return{controller:function(){return c(a)},fn:d,config:b}}]}]),angular.module("angularLeap").factory("leapFn",["$timeout","leapConfig",function(a,b){var c,d,e,f=!1;return d=function(a){var c=a.startPosition[0]-a.position[0],d=a.startPosition[1]-a.position[1],e=a.startPosition[2]-a.position[2],f={x:{distance:Math.abs(c),type:c>0?"left":"right",direction:c},y:{distance:Math.abs(d),type:d>0?"down":"up",direction:d},z:{distance:Math.abs(e),type:e>0?"forward":"backward",direction:e}};return f.isSwipe={left:c>0&&f.x.distance>b().gestureIntense,right:0>c&&f.x.distance>b().gestureIntense,up:0>d&&f.y.distance>b().gestureIntense,down:d>0&&f.y.distance>b().gestureIntense,forward:0>e&&f.z.distance>b().gestureIntense,backward:e>0&&f.z.distance>b().gestureIntense},f},e=function(a){var b={count:Math.round(a.progress,10),type:a.normal[2]>0?"counterClockwise":"clockwise"};return b},c=function(b){var c=f;return!f&&b&&(f=!0,a(function(){f=!1},b)),c},{timeout:function(a){return c(a)},swipeMovement:function(a){return d(a)},circleMovement:function(a){return e(a)}}}]),angular.forEach(["leapKeyTap","leapScreenTap","leapCircle","leapCircleClockwise","leapCircleCounterClockwise","leapSwipeLeft","leapSwipeRight","leapSwipeUp","leapSwipeDown","leapSwipeForward","leapSwipeBackward"],function(a){var b=a.replace(/([A-Z])/g," $1").split(" "),c=b[1].toLowerCase(),d=b[2];"Tap"===b[2]?c+=b[2]:"Circle"===b[2]&&(c+=b[2],b[3]&&(c+=b[3])),angular.module("angularLeap").directive(a,["$parse","leap",function(e,f){return function(g,h,i){var j=e(i[a]),k=i.leapTimeout?i.leapTimeout:f.config().defaultTimeout,l=function(a){if(a.type===c){if("swipe"===c&&!f.fn.swipeMovement(a).isSwipe[d.toLowerCase()])return;if("Circle"===b[2]&&d&&f.fn.circleMovement(a).type!==d.toLowerCase())return;f.fn.timeout(k)||g.$apply(function(){j(g,{$gesture:a})})}};f.controller().on("gesture",l),g.$on("$destroy",function(){f.controller().removeListener("gesture",l)})}}])}),angular.module("angularLeap").directive("leapOverlay",["$document","$window","leap",function(a,b,c){return{restrict:"A",link:function(a,b){a.width=b.clientWidth,a.height=b.clientHeight;c.controller().on("frame",function(c){a.frame||(a.frame=c),a.$apply(function(){a.pointables=[],angular.forEach(c.pointables,function(d){var e=Math.abs(d.tipPosition[2]+c.interactionBox.depth),f=d.tipPosition[0]-c.interactionBox.center[0],g=d.tipPosition[1]-c.interactionBox.center[1],h={id:d.id,_position:d.tipPosition,position:{x:Math.abs((c.interactionBox.width+f)/(2*c.interactionBox.width)*b[0].clientWidth)-e/2,y:Math.abs((c.interactionBox.height-g)/(2*c.interactionBox.height)*b[0].clientHeight)-e/2,size:e},tool:d.tool};a.pointables.push(h)},b)})})},templateUrl:"src/view/overlay.html"}}]);